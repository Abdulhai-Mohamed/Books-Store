{

    "Logging": {
        /*
            LogLevel indicates the severity of the logged message. It can be any of the following. They are listed here from lowest to highest severity.
            Trace = 0
            Debug = 1
            Information = 2
            Warning = 3
            Error = 4
            Critical = 5
            None = 6

            LogLevel Enum

            LogLevel enum is present in Microsoft.Extensions.Logging namespace


            namespace Microsoft.Extensions.Logging
            {
                public enum LogLevel
                {
                    Trace = 0,
                    Debug = 1,
                    Information = 2,
                    Warning = 3,
                    Error = 4,
                    Critical = 5,
                    None = 6
                }
            }


            LogLevel setting in appsettings.json file is used to control how much log data is logged or displayed. 

    Since we have set "Default": "Trace", we see everything from Trace level and higher. Since Trace is the lowest level we see all the logs.

    */

        /*

            The following LogLevel configuration applies to all logging providers. A logging provider is 
        the component that stores or displays logs. For example, the Console logging provider displays logs 
        on the console. Similarly, the Debug logging provider displays logs on the Debug window in Visual Studio.


        */

        "LogLevel": {
            /*
            The "Default": "Error" configuration in the "Logging" section of the appsettings.json file sets the default log
            level to "Error" for all categories that do not have a specified log level. This means
            that any log message from any class or namespace that does not have a specific log level configured
            will be logged at the "Error" level.

            */
            "Default": "Trace",

            //Books_Store.Controllers.HomeController is the LOG CATEGORY
            //Trace is the LOG LEVEL.Remeber log level can be(Trace, Debug, Information, etc...)
            //In simple terms, LOG CATEGORY is the fully qualified name of the class that logged the message.The log category is displayed as a string in the logged message so we can use it easily determine from which class the log came from.LOG CATEGORY is used to filter logs.
            /*
                With the following LogLevel configuration, we see everything from Trace level and higher from the log category "Books_Store.Controllers.HomeController". However, for the category "Books_Store.Models.SQLEmployeeRepository" only Error level logs and higher are displayed.
            */

            "Microsoft": "Trace"
        },

        "Debug": { // Debug provider.
            "LogLevel": {
                "Default": "Warning",
                "Microsoft": "Information"

            }
        }
       
        //nlog not read appsetting
        //"NLog": {
        //    "throwConfigExceptions": true,
        //    "LogLevel": {
        //            "Default": "Warning",
        //            "Microsoft": "Warning"
        //            },
        //        "targets": {
        //            "async": true,
        //            "database": {
        //                "type": "Database",
        //                "dbProvider": "System.Data.SqlClient",
        //                "connectionStringName": "AuthorDBConnection",
        //                "keepConnection": "true",
        //                "commandText": "INSERT INTO [NlogDBLog] (Application, Logged,logger,Level, Message, CallSite, Exception,stackTrace,requestUrl,requestType) VALUES  ( @Application, @Logged,@Logger, @Level, @Message, @Callsite, @Exception,@requestUrl,@requestType",
        //                "parameters": [
        //                    {
        //                        "name": "@application",
        //                        "layout": "AspNetCoreNlog"
        //                        //"dbType": "DbType.DateTime"
        //                    },
        //                    {
        //                        "name": "logged",
        //                        "layout": "${date}"
        //                    },
        //                    {
        //                        "name": "logger",
        //                        "layout": "${logger}"
        //                    },
        //                    {
        //                        "name": "message",
        //                        "layout": "${message}"
        //                    },
        //                    {
        //                        "name": "stackTrace",
        //                        "layout": "${stacktrace}"
        //                    },
        //                    {
        //                        "name": "logger",
        //                        "layout": "${logger}"
        //                    },
        //                    {
        //                        "name": "exception",
        //                        "layout": "${exception:tostring}"
        //                    },
        //                    {
        //                        "name": "requestUrl",
        //                        "layout": "${aspnet-request-url}"
        //                    },
        //                    {
        //                        "name": "requestType",
        //                        "layout": "${aspnet-request-method}"
        //                    },
        //                    {
        //                        "name": "callSite",
        //                        "layout": "${callsite:filename=true}"
        //                    },
        //                    {
        //                        "name": "level",
        //                        "layout": "${level}"
        //                    }
        //                ]
        //            }

        //        },
        //        "rules": [
        //            {
        //                "logger": "*",
        //                "minLevel": "Trace",
        //                "writeTo": "database"
        //            }
        //        ]

        //    }


        },



    "testJsonKeys": "key from appseting json",

    "AllowedHosts": "*",



    //EmailSettings  section will deserialized  to EmailSettings class
  "EmailSettings": {
    //info of server
    "SmtpServer": "smtp.gmail.com",
    "SmtpPort": 587, //although it is ssl we us port of tls
    //credentials to sent over SMTP
    "SmtpUsername": "abdulhaimohamed07@gmail.com",
    "SmtpPassword": "ylex kblr qnyz jeyf",
    //info of sender
    "SenderName": "Abdul-Hai Mohamed .Net Developer",
    "SenderEmail": "abdulhaimohamed07@gmail.com"
  }

}
